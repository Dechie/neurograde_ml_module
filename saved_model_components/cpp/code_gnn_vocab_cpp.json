{
    "node_type_to_id": {
        "<UNK_TYPE>": 0,
        "translation_unit": 1,
        "preproc_include": 2,
        "#include": 3,
        "system_lib_string": 4,
        "preproc_def": 5,
        "#define": 6,
        "identifier": 7,
        "preproc_arg": 8,
        "using_declaration": 9,
        "using": 10,
        "namespace": 11,
        ";": 12,
        "declaration": 13,
        "primitive_type": 14,
        "array_declarator": 15,
        "[": 16,
        "number_literal": 17,
        "]": 18,
        "function_definition": 19,
        "function_declarator": 20,
        "parameter_list": 21,
        "(": 22,
        "parameter_declaration": 23,
        ")": 24,
        "compound_statement": 25,
        "{": 26,
        "return_statement": 27,
        "return": 28,
        "conditional_expression": 29,
        "binary_expression": 30,
        ">": 31,
        "?": 32,
        ":": 33,
        "unary_expression": 34,
        "-": 35,
        "}": 36,
        ",": 37,
        "expression_statement": 38,
        "call_expression": 39,
        "argument_list": 40,
        "<=": 41,
        "if_statement": 42,
        "if": 43,
        "condition_clause": 44,
        "==": 45,
        "subscript_expression": 46,
        "subscript_argument_list": 47,
        "init_declarator": 48,
        "=": 49,
        "+": 50,
        "assignment_expression": 51,
        ">>": 52,
        "while_statement": 53,
        "while": 54,
        "update_expression": 55,
        "++": 56,
        "break_statement": 57,
        "break": 58,
        "<<": 59,
        "type_definition": 60,
        "typedef": 61,
        "sized_type_specifier": 62,
        "long": 63,
        "type_identifier": 64,
        "template_type": 65,
        "template_argument_list": 66,
        "<": 67,
        "type_descriptor": 68,
        "preproc_function_def": 69,
        "preproc_params": 70,
        "type_qualifier": 71,
        "const": 72,
        "alias_declaration": 73,
        "for_statement": 74,
        "for": 75,
        "char_literal": 76,
        "'": 77,
        "character": 78,
        "string_literal": 79,
        "\"": 80,
        "string_content": 81,
        "qualified_identifier": 82,
        "namespace_identifier": 83,
        "::": 84,
        "+=": 85,
        "cast_expression": 86,
        "pointer_expression": 87,
        "&": 88,
        "field_expression": 89,
        ".": 90,
        "field_identifier": 91,
        "template_function": 92,
        "--": 93,
        "parenthesized_expression": 94,
        "/": 95,
        ">=": 96,
        "else_clause": 97,
        "else": 98,
        "*": 99,
        "%": 100,
        "&&": 101,
        "storage_class_specifier": 102,
        "static": 103,
        "false": 104,
        "placeholder_type_specifier": 105,
        "auto": 106,
        "!=": 107,
        "!": 108,
        "||": 109,
        "true": 110,
        "struct_specifier": 111,
        "struct": 112,
        "field_declaration_list": 113,
        "field_declaration": 114,
        "import_declaration": 115,
        "import": 116,
        "module_name": 117,
        "abstract_function_declarator": 118,
        "ERROR": 119,
        "lambda_capture_specifier": 120,
        "^": 121,
        "labeled_statement": 122,
        "statement_identifier": 123,
        "pointer_declarator": 124,
        "new_expression": 125,
        "new": 126,
        "new_declarator": 127,
        "sizeof_expression": 128,
        "sizeof": 129,
        "delete_expression": 130,
        "delete": 131,
        "escape_sequence": 132,
        "continue_statement": 133,
        "continue": 134,
        "*=": 135,
        "%=": 136,
        "/=": 137,
        "unsigned": 138,
        "-=": 139,
        "template_declaration": 140,
        "template": 141,
        "template_parameter_list": 142,
        "type_parameter_declaration": 143,
        "typename": 144,
        "reference_declarator": 145,
        "optional_parameter_declaration": 146,
        "abstract_pointer_declarator": 147,
        "for_range_loop": 148,
        "lambda_expression": 149,
        "lambda_declarator": 150,
        "inline": 151,
        "comma_expression": 152,
        "|=": 153,
        "preproc_call": 154,
        "preproc_directive": 155,
        "initializer_list": 156,
        "friend_declaration": 157,
        "friend": 158,
        "operator_name": 159,
        "operator": 160,
        "preproc_ifdef": 161,
        "#ifndef": 162,
        "#endif": 163,
        "class": 164,
        "...": 165,
        "constexpr": 166,
        "null": 167,
        "NULL": 168,
        "variadic_type_parameter_declaration": 169,
        "variadic_parameter_declaration": 170,
        "variadic_declarator": 171,
        "parameter_pack_expansion": 172,
        "and": 173,
        "nullptr": 174,
        "structured_binding_declarator": 175,
        "goto_statement": 176,
        "goto": 177,
        "or": 178,
        "class_specifier": 179,
        "access_specifier": 180,
        "public": 181,
        "field_initializer_list": 182,
        "field_initializer": 183,
        "destructor_name": 184,
        "~": 185,
        "base_class_clause": 186,
        "->": 187,
        "private": 188,
        "#if": 189,
        "namespace_definition": 190,
        "declaration_list": 191,
        "abstract_array_declarator": 192,
        "compound_literal_expression": 193,
        "lambda_default_capture": 194,
        "this": 195,
        "switch_statement": 196,
        "switch": 197,
        "case_statement": 198,
        "case": 199,
        "^=": 200,
        "do_statement": 201,
        "do": 202,
        "dependent_type": 203,
        ">>=": 204,
        "#else": 205,
        "#ifdef": 206,
        "signed": 207,
        "default": 208,
        "enum_specifier": 209,
        "enum": 210,
        "enumerator_list": 211,
        "enumerator": 212,
        "|": 213,
        "register": 214,
        "not": 215,
        "&=": 216,
        "<<=": 217,
        "[]": 218,
        "preproc_else": 219,
        "xor": 220,
        "short": 221,
        "concatenated_string": 222,
        "()": 223,
        "initializer_pair": 224,
        "decltype": 225,
        "trailing_return_type": 226,
        "namespace_alias_definition": 227,
        "nested_namespace_specifier": 228,
        "user_defined_literal": 229,
        "literal_suffix": 230,
        ".*": 231,
        "explicit_function_specifier": 232,
        "explicit": 233,
        "operator_cast": 234,
        "optional_type_parameter_declaration": 235,
        "template_template_parameter_declaration": 236,
        "abstract_reference_declarator": 237,
        "virtual": 238,
        "virtual_specifier": 239,
        "final": 240,
        "protected": 241,
        "throw_statement": 242,
        "throw": 243,
        "\"\"": 244,
        "default_method_clause": 245,
        "preproc_defined": 246,
        "defined": 247,
        "template_method": 248,
        "override": 249,
        "attribute_declaration": 250,
        "[[": 251,
        "attribute": 252,
        "]]": 253,
        "parenthesized_declarator": 254,
        "gnu_asm_expression": 255,
        "asm": 256,
        "gnu_asm_qualifier": 257,
        "volatile": 258,
        "gnu_asm_output_operand_list": 259,
        "gnu_asm_output_operand": 260,
        "__asm__": 261,
        "noexcept": 262,
        "static_assert_declaration": 263,
        "static_assert": 264,
        "gnu_asm_input_operand_list": 265,
        "gnu_asm_input_operand": 266,
        "try_statement": 267,
        "try": 268,
        "catch_clause": 269,
        "catch": 270,
        "abstract_parenthesized_declarator": 271,
        "#elif": 272,
        "R\"": 273,
        "raw_string_delimiter": 274,
        "raw_string_content": 275,
        "fold_expression": 276,
        "lambda_capture_initializer": 277,
        "dependent_name": 278,
        "raw_string_literal": 279,
        "extern": 280,
        "noreturn": 281,
        "pure_virtual_clause": 282,
        "bitfield_clause": 283,
        "init_statement": 284,
        "attribute_specifier": 285,
        "__attribute__": 286,
        "__asm": 287,
        "ref_qualifier": 288,
        "union_specifier": 289,
        "union": 290,
        "mutable": 291
    },
    "next_node_type_id": 292,
    "node_vocab_size": 2000
}