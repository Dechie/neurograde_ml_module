{
    "node_type_to_id": {
        "<UNK_TYPE>": 0,
        "program": 1,
        "import_declaration": 2,
        "import": 3,
        "scoped_identifier": 4,
        "identifier": 5,
        ".": 6,
        ";": 7,
        "asterisk": 8,
        "*": 9,
        "static": 10,
        "class_declaration": 11,
        "class": 12,
        "class_body": 13,
        "{": 14,
        "method_declaration": 15,
        "modifiers": 16,
        "public": 17,
        "void_type": 18,
        "formal_parameters": 19,
        "(": 20,
        "formal_parameter": 21,
        "array_type": 22,
        "type_identifier": 23,
        "dimensions": 24,
        "[": 25,
        "]": 26,
        ")": 27,
        "throws": 28,
        "block": 29,
        "local_variable_declaration": 30,
        "variable_declarator": 31,
        "=": 32,
        "object_creation_expression": 33,
        "new": 34,
        "argument_list": 35,
        "integral_type": 36,
        "int": 37,
        "method_invocation": 38,
        "array_creation_expression": 39,
        "dimensions_expr": 40,
        "for_statement": 41,
        "for": 42,
        "decimal_integer_literal": 43,
        "binary_expression": 44,
        "<": 45,
        "update_expression": 46,
        "++": 47,
        "expression_statement": 48,
        "assignment_expression": 49,
        "array_access": 50,
        "}": 51,
        "+": 52,
        "floating_point_type": 53,
        "double": 54,
        ",": 55,
        "if_statement": 56,
        "if": 57,
        "parenthesized_expression": 58,
        "==": 59,
        "field_access": 60,
        "decimal_floating_point_literal": 61,
        "+=": 62,
        "-": 63,
        "return_statement": 64,
        "return": 65,
        "field_declaration": 66,
        "constructor_declaration": 67,
        "constructor_body": 68,
        "this": 69,
        "explicit_constructor_invocation": 70,
        "private": 71,
        ">=": 72,
        "--": 73,
        "<<=": 74,
        "unary_expression": 75,
        "!": 76,
        "&&": 77,
        "break_statement": 78,
        "break": 79,
        ">": 80,
        "while_statement": 81,
        "while": 82,
        "char": 83,
        "else": 84,
        "generic_type": 85,
        "type_arguments": 86,
        "enhanced_for_statement": 87,
        ":": 88,
        "character_literal": 89,
        "!=": 90,
        "long": 91,
        "<=": 92,
        "/": 93,
        "marker_annotation": 94,
        "@": 95,
        "boolean_type": 96,
        "null_literal": 97,
        "false": 98,
        "instanceof_expression": 99,
        "instanceof": 100,
        "true": 101,
        "cast_expression": 102,
        "final": 103,
        "<<": 104,
        "byte": 105,
        "do_statement": 106,
        "do": 107,
        "*=": 108,
        "&": 109,
        "-=": 110,
        "||": 111,
        "super_interfaces": 112,
        "implements": 113,
        "type_list": 114,
        "%": 115,
        "string_literal": 116,
        "\"": 117,
        "string_fragment": 118,
        "try_statement": 119,
        "try": 120,
        "catch_clause": 121,
        "catch": 122,
        "catch_formal_parameter": 123,
        "catch_type": 124,
        "%=": 125,
        "ternary_expression": 126,
        "?": 127,
        "scoped_type_identifier": 128,
        "throw_statement": 129,
        "throw": 130,
        "interface_declaration": 131,
        "interface": 132,
        "interface_body": 133,
        "lambda_expression": 134,
        "inferred_parameters": 135,
        "->": 136,
        "continue_statement": 137,
        "continue": 138,
        "spread_parameter": 139,
        "...": 140,
        "^": 141,
        "enum_declaration": 142,
        "enum": 143,
        "enum_body": 144,
        "enum_constant": 145,
        "enum_body_declarations": 146,
        "labeled_statement": 147,
        "escape_sequence": 148,
        "hex_integer_literal": 149,
        "array_initializer": 150,
        "/=": 151,
        "~": 152,
        ">>": 153,
        "|": 154,
        ">>>": 155,
        ">>=": 156,
        "type_parameters": 157,
        "type_parameter": 158,
        "ERROR": 159,
        "switch_expression": 160,
        "switch": 161,
        "switch_block": 162,
        "switch_block_statement_group": 163,
        "switch_label": 164,
        "case": 165,
        "package_declaration": 166,
        "package": 167,
        "|=": 168,
        "&=": 169,
        "^=": 170,
        "try_with_resources_statement": 171,
        "resource_specification": 172,
        "resource": 173,
        "protected": 174,
        "default": 175,
        "wildcard": 176,
        "extends": 177,
        "annotation": 178,
        "annotation_argument_list": 179,
        "superclass": 180,
        "super": 181,
        "method_reference": 182,
        "::": 183,
        "short": 184,
        "assert_statement": 185,
        "assert": 186,
        "class_literal": 187,
        "finally_clause": 188,
        "finally": 189,
        "float": 190,
        "type_bound": 191,
        "static_initializer": 192,
        "extends_interfaces": 193,
        "abstract": 194,
        "octal_integer_literal": 195,
        "volatile": 196,
        ">>>=": 197,
        "underscore_pattern": 198,
        "element_value_array_initializer": 199,
        "strictfp": 200,
        "transient": 201,
        "synchronized": 202,
        "binary_integer_literal": 203,
        "constant_declaration": 204,
        "hex_floating_point_literal": 205,
        "synchronized_statement": 206,
        "compact_constructor_declaration": 207,
        "template_expression": 208
    },
    "next_node_type_id": 209,
    "node_vocab_size": 2000
}