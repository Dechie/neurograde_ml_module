{
    "node_type_to_id": {
        "<UNK_TYPE>": 0,
        "ERROR": 1,
        "expression_statement": 2,
        "assignment": 3,
        "identifier": 4,
        "=": 5,
        "dictionary": 6,
        "{": 7,
        "}": 8,
        "pattern_list": 9,
        ",": 10,
        "expression_list": 11,
        "string": 12,
        "string_start": 13,
        "string_content": 14,
        "string_end": 15,
        "call": 16,
        "argument_list": 17,
        "(": 18,
        ")": 19,
        ":": 20,
        "return": 21,
        "for_statement": 22,
        "for": 23,
        "in": 24,
        "subscript": 25,
        "[": 26,
        "slice": 27,
        "integer": 28,
        "]": 29,
        "block": 30,
        "binary_operator": 31,
        "%": 32,
        "tuple": 33,
        "keyword_argument": 34,
        "function_definition": 35,
        "def": 36,
        "parameters": 37,
        "print_statement": 38,
        "print": 39,
        "comparison_operator": 40,
        "attribute": 41,
        ".": 42,
        "continue": 43,
        "if": 44,
        "==": 45,
        "list": 46,
        "+": 47,
        "none": 48,
        "true": 49,
        "false": 50,
        "not_operator": 51,
        "not": 52,
        "break": 53,
        "list_comprehension": 54,
        "for_in_clause": 55,
        "_": 56,
        "parenthesized_expression": 57,
        "boolean_operator": 58,
        "<": 59,
        "and": 60,
        "module": 61,
        "return_statement": 62,
        "/": 63,
        "*": 64,
        "-": 65,
        ">=": 66,
        "<=": 67,
        "list_pattern": 68,
        "unary_operator": 69,
        "import_statement": 70,
        "import": 71,
        "dotted_name": 72,
        "import_from_statement": 73,
        "from": 74,
        "**": 75,
        "type": 76,
        "list_splat": 77,
        "float": 78,
        ">": 79,
        "lambda": 80,
        "augmented_assignment": 81,
        "+=": 82,
        "*=": 83,
        "conditional_expression": 84,
        "else": 85,
        "<<": 86,
        "constrained_type": 87,
        "not in": 88,
        "-=": 89,
        "generic_type": 90,
        "type_parameter": 91,
        "!=": 92,
        "%=": 93,
        "while_statement": 94,
        "while": 95,
        "delete_statement": 96,
        "del": 97,
        "or": 98,
        "generator_expression": 99,
        "global_statement": 100,
        "global": 101,
        "aliased_import": 102,
        "as": 103,
        "dictionary_comprehension": 104,
        "pair": 105,
        "class_definition": 106,
        "class": 107,
        "if_clause": 108,
        "escape_sequence": 109,
        "assert": 110,
        "|=": 111,
        "typed_parameter": 112,
        "lambda_parameters": 113,
        ">>": 114,
        "^": 115,
        ">>=": 116,
        "&": 117,
        ";": 118,
        "break_statement": 119,
        "~": 120,
        "default_parameter": 121,
        "list_splat_pattern": 122,
        "is": 123,
        "is not": 124,
        "wildcard_import": 125,
        "try": 126,
        "yield": 127,
        "interpolation": 128,
        "tuple_pattern": 129,
        "future_import_statement": 130,
        "__future__": 131,
        "dictionary_splat": 132,
        "/=": 133,
        "continue_statement": 134,
        "@": 135,
        "pass": 136,
        "format_specifier": 137,
        "elif": 138,
        "concatenated_string": 139,
        "set": 140,
        "member_type": 141,
        "except": 142,
        "raise": 143,
        "if_statement": 144,
        "assert_statement": 145,
        "|": 146,
        "typed_default_parameter": 147,
        "dictionary_splat_pattern": 148,
        "^=": 149,
        "set_comprehension": 150,
        "->": 151,
        "as_pattern": 152,
        "as_pattern_target": 153,
        "ellipsis": 154,
        "named_expression": 155,
        ":=": 156,
        "pass_statement": 157,
        "**=": 158,
        "<<=": 159,
        "\\": 160,
        "match": 161,
        "&=": 162,
        "case": 163,
        "type_conversion": 164,
        "raise_statement": 165,
        "nonlocal_statement": 166,
        "nonlocal": 167
    },
    "next_node_type_id": 168,
    "node_vocab_size": 2000
}